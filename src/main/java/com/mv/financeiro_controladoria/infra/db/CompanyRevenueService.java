package com.mv.financeiro_controladoria.infra.db;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

@Service
public class CompanyRevenueService {

    private final JdbcTemplate jdbc;
    private SimpleJdbcCall fnCompanyRevenue;
    private SimpleJdbcCall fnClientNetBalance;

    public CompanyRevenueService(JdbcTemplate jdbc) {
        this.jdbc = jdbc;
    }

    @PostConstruct
    public void init() {
        ensureSchemaObjects();

        this.fnCompanyRevenue = new SimpleJdbcCall(jdbc)
                .withCatalogName("XPTO_PKG")
                .withFunctionName("FN_COMPANY_REVENUE");

        this.fnClientNetBalance = new SimpleJdbcCall(jdbc)
                .withCatalogName("XPTO_PKG")
                .withFunctionName("FN_CLIENT_NET_BALANCE");
    }

    private void ensureSchemaObjects() {
        createTableCompanyFeesIfNotExists();
        createTableMovementsIfNotExists();
        createPackageXptoIfNotExistsOrReplace();
    }

    private void createTableCompanyFeesIfNotExists() {
        String plsql =
                "DECLARE\n" +
                        "  v_count NUMBER;\n" +
                        "BEGIN\n" +
                        "  SELECT COUNT(*) INTO v_count FROM USER_TABLES WHERE TABLE_NAME = 'COMPANY_FEES';\n" +
                        "  IF v_count = 0 THEN\n" +
                        "    EXECUTE IMMEDIATE 'CREATE TABLE COMPANY_FEES (\n" +
                        "      ID         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                        "      FEE_DATE   DATE            NOT NULL,\n" +
                        "      FEE_AMOUNT NUMBER(19,2)    NOT NULL\n" +
                        "    )';\n" +
                        "  END IF;\n" +
                        "END;";
        jdbc.execute(plsql);
    }

    private void createTableMovementsIfNotExists() {
        String plsql =
                "DECLARE\n" +
                        "  v_count NUMBER;\n" +
                        "BEGIN\n" +
                        "  SELECT COUNT(*) INTO v_count FROM USER_TABLES WHERE TABLE_NAME = 'MOVEMENTS';\n" +
                        "  IF v_count = 0 THEN\n" +
                        "    EXECUTE IMMEDIATE 'CREATE TABLE MOVEMENTS (\n" +
                        "      ID         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                        "      CLIENT_ID  NUMBER         NOT NULL,\n" +
                        "      TYPE       VARCHAR2(20)   NOT NULL,\n" +
                        "      AMOUNT     NUMBER(19,2)   NOT NULL,\n" +
                        "      MOV_DATE   DATE           NOT NULL\n" +
                        "    )';\n" +
                        "    -- √çndices opcionais (exemplo)\n" +
                        "    EXECUTE IMMEDIATE ''CREATE INDEX IDX_MOV_CLIENT ON MOVEMENTS(CLIENT_ID)'';\n" +
                        "    EXECUTE IMMEDIATE ''CREATE INDEX IDX_MOV_DATE   ON MOVEMENTS(MOV_DATE)'';\n" +
                        "  END IF;\n" +
                        "END;";
        jdbc.execute(plsql);
    }

    private void createPackageXptoIfNotExistsOrReplace() {
        String pkgSpec =
                "CREATE OR REPLACE PACKAGE XPTO_PKG AS\n" +
                        "  FUNCTION FN_COMPANY_REVENUE (P_START_DATE IN DATE, P_END_DATE IN DATE) RETURN NUMBER;\n" +
                        "  FUNCTION FN_CLIENT_NET_BALANCE (P_CLIENT_ID IN NUMBER) RETURN NUMBER;\n" +
                        "END XPTO_PKG;";
        jdbc.execute(pkgSpec);

        String pkgBody =
                "CREATE OR REPLACE PACKAGE BODY XPTO_PKG AS\n" +
                        "\n" +
                        "  FUNCTION FN_COMPANY_REVENUE (P_START_DATE IN DATE, P_END_DATE IN DATE)\n" +
                        "  RETURN NUMBER IS\n" +
                        "    V_TOTAL NUMBER := 0;\n" +
                        "  BEGIN\n" +
                        "    SELECT NVL(SUM(FEE_AMOUNT), 0)\n" +
                        "      INTO V_TOTAL\n" +
                        "      FROM COMPANY_FEES\n" +
                        "     WHERE FEE_DATE BETWEEN TRUNC(P_START_DATE) AND TRUNC(P_END_DATE);\n" +
                        "    RETURN V_TOTAL;\n" +
                        "  END;\n" +
                        "\n" +
                        "  FUNCTION FN_CLIENT_NET_BALANCE (P_CLIENT_ID IN NUMBER)\n" +
                        "  RETURN NUMBER IS\n" +
                        "    V_CREDIT NUMBER := 0;\n" +
                        "    V_DEBIT  NUMBER := 0;\n" +
                        "  BEGIN\n" +
                        "    SELECT NVL(SUM(AMOUNT),0) INTO V_CREDIT\n" +
                        "      FROM MOVEMENTS\n" +
                        "     WHERE CLIENT_ID = P_CLIENT_ID AND TYPE = 'RECEITA';\n" +
                        "\n" +
                        "    SELECT NVL(SUM(AMOUNT),0) INTO V_DEBIT\n" +
                        "      FROM MOVEMENTS\n" +
                        "     WHERE CLIENT_ID = P_CLIENT_ID AND TYPE = 'DESPESA';\n" +
                        "\n" +
                        "    RETURN V_CREDIT - V_DEBIT;\n" +
                        "  END;\n" +
                        "\n" +
                        "END XPTO_PKG;";
        jdbc.execute(pkgBody);
    }


    public BigDecimal revenue(LocalDate start, LocalDate end) {
        Map<String, Object> in = new HashMap<>();
        in.put("P_START_DATE", java.sql.Date.valueOf(start));
        in.put("P_END_DATE", java.sql.Date.valueOf(end));
        Number n = fnCompanyRevenue.executeFunction(Number.class, in);
        return n == null ? BigDecimal.ZERO : new BigDecimal(n.toString());
    }

    public BigDecimal getClientNetBalance(Long clientId) {
        Map<String, Object> in = new HashMap<>();
        in.put("P_CLIENT_ID", clientId);
        Number n = fnClientNetBalance.executeFunction(Number.class, in);
        return n == null ? BigDecimal.ZERO : new BigDecimal(n.toString());
    }
}
